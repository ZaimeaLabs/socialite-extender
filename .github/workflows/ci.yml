name: CI

on:
  push:
    branches: [ main, master ]
    tags:    # test also on tags (useful for releases)
      - 'v*'
  pull_request:
    branches: [ main, master ]

permissions:
  contents: read
  actions: write

jobs:
  tests:
    name: Tests (PHP ${{ matrix.php }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        php: [8.2]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: mbstring, xml, curl, sqlite, zip, bcmath
          ini-values: |
            memory_limit = -1
          coverage: xdebug # enable xdebug for possible coverage job (disabled by default in test command)

      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: composer-${{ runner.os }}-php${{ matrix.php }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            composer-${{ runner.os }}-php${{ matrix.php }}-

      - name: Install system dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y git unzip

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress --no-suggest --no-interaction

      - name: Create .env (sqlite)
        run: |
          cp .env.example .env || true
          php -r "file_exists('.env') || copy('.env.example', '.env');"
          # Use sqlite in-memory for tests or file-based sqlite for artisan migrate
          php -r " \$contents = file_get_contents('.env'); \$contents = preg_replace('/^DB_CONNECTION=.*/m','DB_CONNECTION=sqlite', \$contents); \$contents = preg_replace('/^DB_DATABASE=.*/m','DB_DATABASE=database\/database.sqlite', \$contents); file_put_contents('.env', \$contents);"
          mkdir -p database
          touch database/database.sqlite

      - name: Generate APP_KEY
        run: php artisan key:generate --ansi

      - name: Cache config (optional)
        run: |
          php artisan config:clear
          # php artisan config:cache   # uncomment to cache config in CI if desired

      - name: Run migrations (if your tests expect DB)
        run: |
          php artisan migrate --force || true

      - name: Run tests (composer test)
        run: |
          if composer test --no-interaction; then
            echo "composer test passed"
          else
            echo "composer test failed, trying phpunit directly"
            vendor/bin/phpunit --colors=always --testdox || exit 1
          fi
        env:
          # Ensure PHP uses sqlite and not trying to connect to other DBs
          DB_CONNECTION: sqlite
          DB_DATABASE: database/database.sqlite

  coverage:
    name: Coverage (optional)
    runs-on: ubuntu-latest
    needs: tests
    if: always()
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP (with Xdebug)
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2
          extensions: xdebug
          coverage: xdebug

      - name: Install deps
        run: composer install --prefer-dist --no-progress --no-suggest --no-interaction

      - name: Create .env & sqlite
        run: |
          cp .env.example .env || true
          php -r "file_exists('.env') || copy('.env.example', '.env');"
          php -r " \$contents = file_get_contents('.env'); \$contents = preg_replace('/^DB_CONNECTION=.*/m','DB_CONNECTION=sqlite', \$contents); \$contents = preg_replace('/^DB_DATABASE=.*/m','DB_DATABASE=database\/database.sqlite', \$contents); file_put_contents('.env', \$contents);"
          mkdir -p database
          touch database/database.sqlite

      - name: Run tests with coverage
        run: |
          vendor/bin/phpunit --coverage-clover=coverage.xml || true

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml
